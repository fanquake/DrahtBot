diff --git a/src/test/fuzz/FuzzedDataProvider.h b/src/test/fuzz/FuzzedDataProvider.h
index 11f2fbdb8c..9535297f0a 100644
--- a/src/test/fuzz/FuzzedDataProvider.h
+++ b/src/test/fuzz/FuzzedDataProvider.h
@@ -21,6 +21,7 @@
 #include <cstdlib>
 #include <cstring>
 #include <initializer_list>
+#include <iostream>
 #include <limits>
 #include <string>
 #include <type_traits>
@@ -141,6 +142,10 @@ inline std::string FuzzedDataProvider::ConsumeBytesAsString(size_t num_bytes) {
   num_bytes = std::min(num_bytes, remaining_bytes_);
   std::string result(
       reinterpret_cast<const std::string::value_type *>(data_ptr_), num_bytes);
+  std::cout << std::hex << "ifdp.push_bytes(&[";
+  for (uint8_t c : result)
+      std::cout << "0x" << unsigned(c) << ",";
+  std::cout << std::dec << "]); // (len=" << num_bytes << ")\n";
   Advance(num_bytes);
   return result;
 }
@@ -174,6 +179,10 @@ FuzzedDataProvider::ConsumeRandomLengthString(size_t max_length) {
   }
 
   result.shrink_to_fit();
+  std::cout << std::hex << "ifdp.push_str_u8(&[";
+  for (uint8_t c : result)
+      std::cout << "0x" << unsigned(c) << ",";
+  std::cout << std::dec << "]); // (len=" << result.size() << "), Limit: " << max_length << "\n";
   return result;
 }
 
@@ -231,6 +240,26 @@ T FuzzedDataProvider::ConsumeIntegralInRange(T min, T max) {
   if (range != std::numeric_limits<decltype(range)>::max())
     result = result % (range + 1);
 
+  if (offset) {
+      std::cout << "ifdp.push_integral_in_range(";
+      if constexpr (std::is_signed_v<T>) {
+          std::cout << int64_t{static_cast<T>(static_cast<uint64_t>(min) + result)}
+                    << "i" << (sizeof(T) * 8) << ", "
+                    << int64_t{min}
+                    << "i" << (sizeof(T) * 8) << ", "
+                    << int64_t{max}
+                    << "i" << (sizeof(T) * 8) << ", ";
+      } else {
+          std::cout << uint64_t{static_cast<T>(static_cast<uint64_t>(min) + result)}
+                    << "u" << (sizeof(T) * 8) << ", "
+                    << uint64_t{min}
+                    << "u" << (sizeof(T) * 8) << ", "
+                    << uint64_t{max}
+                    << "u" << (sizeof(T) * 8) << ", ";
+      }
+      std::cout << ");\n";
+  }
+
   return static_cast<T>(static_cast<uint64_t>(min) + result);
 }
 
@@ -249,6 +278,7 @@ template <typename T>
 T FuzzedDataProvider::ConsumeFloatingPointInRange(T min, T max) {
   if (min > max)
     abort();
+  std::cout << "ifdp.push_float(UNIMPLEMENTED);\n";
 
   T range = .0;
   T result = min;
@@ -338,6 +368,10 @@ inline size_t FuzzedDataProvider::ConsumeData(void *destination,
 inline void FuzzedDataProvider::CopyAndAdvance(void *destination,
                                                size_t num_bytes) {
   std::memcpy(destination, data_ptr_, num_bytes);
+  std::cout << std::hex << "ifdp.push_bytes(&[";
+  for (uint8_t* c((uint8_t*)destination); c < (uint8_t*)destination + num_bytes; c++)
+      std::cout << "0x" << unsigned(*c) << ",";
+  std::cout << std::dec << "]); // (len=" << num_bytes << ")\n";
   Advance(num_bytes);
 }
 
